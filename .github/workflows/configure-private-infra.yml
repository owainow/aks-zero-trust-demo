# This is a basic workflow to help you get started with Actions

name: TEMP Configure infra post deployment

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Terraform_Provision:
    # The type of runner that the job will run on
    runs-on: self-hosted
    
    
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
     # Install required packages
      - name: Install required packages.
        run: apt-get update && apt-get install unzip -y && apt-get install python3 -y && apt-get install sudo -y && sudo apt-get install npm -y && curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash && az aks install-cli | sudo bash
      
      - name: Generate github repo url 
        run: |
            export gh_repo_url="https://github.com/repos/${{ github.repository }}"
            echo "gh_repo_url=$gh_repo_url" >> $GITHUB_ENV

      - name: Azure Login
        uses: Azure/login@v1
        with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Install the preferred version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.5
    
      - name: Enable local accounts
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        run: az aks update -g oow-aks-zero-trust-demo -n aks-oow-zerotrust --enable-local-accounts     
      # Will use cluster name & RG output instead of hard coded name  here when running full workflow
      
      - name: Get KubeConfig
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        run: az aks get-credentials -g oow-aks-zero-trust-demo -n aks-oow-zerotrust --overwrite-existing --admin
      # Will use cluster name & RG output instead of hard coded name  here when running full workflow

      - name: Setup Cluster for GitOps - Register Extension manager
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: az feature register --namespace Microsoft.ContainerService --name AKS-ExtensionManager
     
      - name: Setup Cluster for GitOps - Register MSFT Kubernetes
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:   az provider register --namespace Microsoft.Kubernetes  

      - name: Setup Cluster for GitOps - Register MSFT-ContainerService
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: az provider register --namespace Microsoft.ContainerService 

      - name: Setup Cluster for GitOps - Register KubernetesConfig
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: az provider register --namespace Microsoft.KubernetesConfiguration 

      - name: Setup Cluster for GitOps - K8s  Config Upgrade
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: az extension add -n k8s-configuration --upgrade 

      - name: Setup Cluster for GitOps -  K8s Extension Upgrade
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: az extension add -n k8s-extension --upgrade

      - name: Setup Cluster for Istio - Add extension for preview
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: az extension add --name aks-preview
               
      - name: Setup Cluster for Istio - Register for feature
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:  az feature register --namespace "Microsoft.ContainerService" --name "AzureServiceMeshPreview"

      - name: Install Istio CLI
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:  cd / && curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.17.2 sh && cd /istio-1.17.2 && chmod -R +x bin && export PATH="$PATH:/istio-1.17.2/bin" && istioctl install -y --set profile=minimal
     
      
      - name: Setup Cluster for Argo - Install Argo CLI
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: curl -SL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd | sudo bash
           
      - name: Create ArgoCD Namespace and install argo
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: kubectl create namespace argocd && kubectl apply -n argocd -f argocd.yaml

      - name: Expose ArgoCD Dashboard
        run: |
          echo "--- Expose ArgoCD Dashboard via K8s Service"
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

          echo "--- Wait until Loadbalancer url is present (see https://stackoverflow.com/a/70108500/4964553)"
          until kubectl get service/argocd-server -n argocd --output=jsonpath='{.status.loadBalancer}' | grep "ingress"; do : ; done
        
      - name: Login to argo server
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run: argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}') --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --insecure

      - name: Deploy ArgoCD Infra - NGINX
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:  argocd app create nginx-infra --repo $gh_repo_url --path Cluster/argocd/infrastructure/nginx --self-heal --sync-policy automated --auto-prune

      - name: Deploy ArgoCD App - Colors App
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:  argocd app create colors-app --repo $gh_repo_url --path Cluster/argocd/apps/colors-app --self-heal --sync-policy automated --auto-prune
     
      - name: Deploy ArgoCD Infra - Istio
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:  argocd app create istio-infra --repo $gh_repo_url --path Cluster/argocd/infrastructure/istio --self-heal --sync-policy automated --auto-prune

      - name: Deploy ArgoCD Infra - Calico
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:  argocd app create calico-infra --repo $gh_repo_url --path Cluster/argocd/infrastructure/calico --self-heal --sync-policy automated --auto-prune

      - name: Deploy ArgoCD App - Remote Attest App
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        run:  argocd app create attest-app --repo $gh_repo_url --path Cluster/argocd/apps/cvm-python-app-remoteattest --self-heal --sync-policy automated --auto-prune

      # Create apps for Argo using the ${{ github.repository }} variables so that it can be used by others. 
          
      # Run Terraform Init
      - name: Terraform Init for Intial Terraform Config
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        id: init
        env:
         ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
         ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
         ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
         ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
         RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
         STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
         CONTAINER_NAME: ${{ secrets.CONTAINER_NAME_2 }}
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"
      
      # Run Terraform Apply with Auto Approve
      - name: Terraform Apply for Intial Terraform Config
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve
      
      - name: Disable local accounts
        working-directory: /actions-runner/_work/aks-zero-trust-demo/aks-zero-trust-demo/Terraform/Config_Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        run: az aks update -g oow-aks-zero-trust-demo -n aks-oow-zerotrust --disable-local-accounts
      # Will use cluster name & RG output instead of hard coded name  here when running full workflow
      
